class Solution {
    int start = 0;
    public List<String> braceExpansionII(String expression) {
        Set<String> temp = helper(expression);
        List<String> ans = new ArrayList<String>(temp);
        Collections.sort(ans);
        return ans;
    }
    public Set<String> helper(String s){
        Set<String> ans = new HashSet<String>();
        Set<String> curr = new HashSet<String>();
        curr.add("");
        if(start > s.length()){
            return ans;
        }
        while(start < s.length()){
            char c = s.charAt(start);
            if(c == '{'){
                start = start + 1;
                curr = mul(curr,helper(s));
            }
            else if(c == ','){
                ans = add(ans,curr);
                curr = new HashSet<>();
                curr.add("");
                start = start + 1;
            }
            else if(c == '}'){
                start = start + 1;
                ans = add(ans , curr);
                return ans;
                
            }
            else{
                curr = append(curr , c);
                start = start + 1;
            }
        }
        ans = add(ans , curr);
        return ans;
    }
    public Set<String> mul(Set<String> set1, Set<String> set2){
        Set<String> ans = new HashSet<String>();
        for(String s : set1){
            for(String c : set2){
                ans.add(s+c);
            }
        }
        return ans;
    }
    public Set<String> add(Set<String> set1, Set<String> set2 ){
        for(String s : set2){
            set1.add(s);
        }
        return set1;
    }
    public Set<String> append(Set<String> set1 , char c){
        Set<String> temp = new HashSet<String>();
        for(String s : set1){
            temp.add(s + c);
        }
        return temp;
    }
    
}
