class Trie {
     static Node root;
    class Node{
        boolean isend;
        Node[] arr;
        public Node(){
            isend = false;
            arr = new Node[26];
        }
    }
    public Trie() {
        root = new Node();
    }
    
    public void insert(String word) {
        Node curr = root;
        for(int i = 0 ; i < word.length() ; i++){
            char ch = word.charAt(i);
            if(curr.arr[ch - 'a'] == null){
                curr.arr[ch - 'a'] = new Node();
            }
            curr = curr.arr[ch - 'a'];
        }
        curr.isend = true;
    }
    
    public boolean search(String word) {
        Node curr = root;
        for(int i = 0 ; i < word.length() ; i++){
            char ch  = word.charAt(i);
            if(curr.arr[ch - 'a' ] == null) return false;
            curr = curr.arr[ch - 'a'];
        }
        return curr.isend;
    }
    
    public boolean startsWith(String prefix) {
        Node curr = root;
        for(int i = 0 ; i < prefix.length() ; i++){
            char ch = prefix.charAt(i);
            if(curr.arr[ch - 'a'] == null) return false;
            curr = curr.arr[ch - 'a'];
        }
        return true;
        
    }
}
