class Solution {
    public int search(int[] nums, int target) {
        int pivot = findPivot(nums);
                System.out.println(pivot + "pivot");

        int a = findTarget(nums , 0 , pivot , target);
        int b = findTarget(nums , pivot , nums.length - 1 , target);
        System.out.println(a);
        System.out.println(a);

        if(a == -1 && b == -1){
            return -1 ;
        }
        else{
            return a > b ? a : b;
        }
        
    }
    public int findTarget(int[] nums , int start , int end , int target){
        while(start <= end){
            int mid = start + (end - start) / 2;
            if(nums[mid] == target){
                return mid;
            }
            else if( nums[mid] > target){
                end = mid - 1;
            }
            else{
                start = mid +1 ;
            }
        }
        return -1;
    }
    // private int find(int[] nums, int low, int high, int target) {
    //     while(low <= high) {
    //         int mid = low + (high-low)/2;
    //         if(nums[mid] < target) {
    //             low = mid + 1;
    //         }else if(nums[mid] > target) {
    //             high = mid - 1;
    //         }else {
    //             return mid;
    //         }
    //     }
    //     return -1;
    // }
    public int findPivot(int[] nums){
        int start = 0 , end = nums.length - 1;
        while(start < end){
            int mid = start + (end - start) / 2;
            if(nums[mid] > nums[end]){
                start = mid + 1;
            }
            else{
                end = mid ;
            }
        }
        return start;
    }
//      private int findPivot(int[] nums) {
//         int low = 0;
//         int high = nums.length-1;
        
//         while(low < high) {
//             int mid = low + (high-low)/2;
//             if(nums[mid] > nums[high]) {
//                 low = mid + 1;
//             }else {
//                 high = mid;
//             }
//         }
//         return low;
//     }
}
