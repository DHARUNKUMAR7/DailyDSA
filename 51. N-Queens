class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans =new ArrayList<List<String>>();
        boolean[][] board=new boolean[n][n];
        helper(board,ans,0);
        return ans;
        
    }
    public int helper(boolean[][] board,List<List<String>> ans,int row){
        if(row==board.length){
            sol(board,ans);
            return 1;
        }
        int count=0;
        for(int i=0;i<board.length;i++){
            if(issafe(row,i,board)){
                board[row][i]=true;
                count+=helper(board,ans,row+1);
                board[row][i]=false;
            }
        }
        return count;
    }
    public boolean issafe(int row,int col,boolean[][] board){
        for(int i=0;i<row;i++){
            if(board[i][col]) return false;
        }
        int maxleft=Math.min(row,col);
        for(int i=1;i<=maxleft;i++){
            if(board[row-i][col-i]) return false;
        }
        int maxright=Math.min(row,board.length-col-1);
        for(int i=1;i<=maxright;i++){
            if(board[row-i][col+i]) return false;
        }
        return true;
    }
    public void sol(boolean[][] board,List<List<String>> ans){
         List<String> res=new ArrayList<String>();
        for(boolean[] a:board){
            StringBuilder sb=new StringBuilder();
            for(boolean b:a){
                if(!b){
                    sb.append(".");
                }
                else sb.append("Q");
            }
            res.add(sb.toString());
        }
        ans.add(res);
    }
}
