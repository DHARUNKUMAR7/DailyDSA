class Solution {
    public int totalNQueens(int n) {
        boolean[][] board=new boolean[n][n];
        return helper(board,0);
        
    }
    public int helper(boolean[][] board,int row){
        if(row==board.length) return 1 ;
        int count=0;
        for(int i=0;i<board.length;i++){
            if(issafe(row,i,board)){
                board[row][i]=true;
                count+=helper(board,row+1);
                board[row][i]=false;
            }
        }
        return count;
    }
    public boolean issafe(int row,int col,boolean[][] board){
        for(int i=0;i<row;i++){
            if(board[i][col]) return false;
        }
        int maxleft=Math.min(row,col);
        for(int i=1;i<=maxleft;i++){
            if(board[row-i][col-i]) return false;
        }
        int maxright=Math.min(row,board.length-col-1);
        for(int i=1;i<=maxright;i++){
            if(board[row-i][col+i]) return false;
        }
        return true;
    }
}
