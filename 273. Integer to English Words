class Solution {
     private static final Map<Integer, String> storage = new HashMap();
    
    static {
        storage.put(0, "Zero");
        storage.put(1, "One");
        storage.put(2, "Two");
        storage.put(3, "Three");
        storage.put(4, "Four");
        storage.put(5, "Five");
        storage.put(6, "Six");
        storage.put(7, "Seven");
        storage.put(8, "Eight");
        storage.put(9, "Nine");
        storage.put(10, "Ten");
        storage.put(11, "Eleven");
        storage.put(12, "Twelve");
        storage.put(13, "Thirteen");
        storage.put(14, "Fourteen");
        storage.put(15, "Fifteen");
        storage.put(16, "Sixteen");
        storage.put(17, "Seventeen");
        storage.put(18, "Eighteen");
        storage.put(19, "Nineteen");
        storage.put(20, "Twenty");
        storage.put(30, "Thirty");
        storage.put(40, "Forty");
        storage.put(50, "Fifty");
        storage.put(60, "Sixty");
        storage.put(70, "Seventy");
        storage.put(80, "Eighty");
        storage.put(90, "Ninety");
    }
    public String numberToWords(int num) {
        if(storage.containsKey(num)) return storage.get(num);
        StringBuilder sb=new StringBuilder();
        helper(sb,num);
        return sb.toString().trim();
    }
    public void helper(StringBuilder sb,int num){
        if(num==0) return ;
        else if(num<20){
            sb.append(storage.get(num)).append(" ");
        }
        else if(num<100){
            sb.append(storage.get(num-num%10)).append(" ");
            helper(sb,num%10);
        }
        else if(num<1000){
            process(sb,num,100,"Hundred");
        }
        else if(num<1000000){
            process(sb,num,1000,"Thousand");
        }
         else if(num<1000000000){
            process(sb,num,1000000,"Million");
        }
        else {
             process(sb,num,1000000000,"Billion");
        }
        
        
    }
    public void process(StringBuilder sb,int num,int reducer,String s){
        helper(sb,num/reducer);
        sb.append(s).append(" ");
        helper(sb,num%reducer);
    }
}
