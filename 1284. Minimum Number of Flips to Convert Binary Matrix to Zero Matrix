class Solution {
    int min=Integer.MAX_VALUE;
    public int minFlips(int[][] mat) {
        boolean visited[][]=new boolean[mat.length][mat[0].length];
        helper(mat,0,0,0,visited);
        if(min==Integer.MAX_VALUE){
            return -1;
        }
        return min;
    }
    public void helper(int[][] mat,int row,int col,int steps,boolean[][] visited){
       if(checkzeros(mat)){
            min=Math.min(min,steps);
            return ;
        } if(row<0||col<0||row>=mat.length||col>=mat[0].length||visited[row][col]){
            return;
        }
        // if(checkzeros(mat)){
        //     min=Math.min(min,steps);
        //     return ;
        // }
        visited[row][col]=true;
        flip(mat,row,col);
        helper(mat,row+1,col,steps+1,visited);
        helper(mat,row-1,col,steps+1,visited);
        helper(mat,row,col+1,steps+1,visited);
        helper(mat,row,col-1,steps+1,visited);
        
        flip(mat,row,col);
         helper(mat,row+1,col,steps,visited);
        helper(mat,row-1,col,steps,visited);
        helper(mat,row,col+1,steps,visited);
        helper(mat,row,col-1,steps,visited);
        visited[row][col]=false;
        


    }
    public void flip(int[][]mat,int row,int col){
         if(row<0||col<0||row>=mat.length||col>=mat[0].length){
            return;
        }
        mat[row][col]=(mat[row][col]+1)%2;
        if(row-1>=0) mat[row-1][col]=(mat[row-1][col]+1)%2;
        if(row+1<=mat.length-1) mat[row+1][col]=(mat[row+1][col]+1)%2;
        if(col-1>=0) mat[row][col-1]=(mat[row][col-1]+1)%2;
        if(col+1<=mat[0].length-1) mat[row][col+1]=(mat[row][col+1]+1)%2;
    }
    public boolean checkzeros(int[][] mat){
        for(int[] a:mat){
            for(int b:a ){
                if(b==1) return false;
            }
        }
        return true;
    }
}
